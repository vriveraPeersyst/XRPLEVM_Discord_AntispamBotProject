====================================
          REPO STRUCTURE            
====================================
xrplevm-antispam-bot
├── .env.example
├── apps
│   └── bot
│       └── src
│           ├── bot.factory.ts
│           ├── features
│           │   ├── role-manager
│           │   │   └── role-manager.ts
│           │   └── spam-detection
│           │       ├── config
│           │       │   └── index.ts
│           │       ├── detector.service.ts
│           │       └── tracker.service.ts
│           └── main.ts
├── directory-skeleton.txt
├── package.json
├── pnpm-workspace.yaml
└── tsconfig.json

8 directories, 11 files


====================================
          FILE CONTENTS             
====================================

-------- xrplevm-antispam-bot/package.json --------
[Binary file content skipped]

-------- xrplevm-antispam-bot/directory-skeleton.txt --------
xrplevm-antispam-bot/
├── apps/
│   └── bot/
│       ├── src/
│       │   ├── main.ts
│       │   ├── config/
│       │   │   └── index.ts
│       │   ├── features/
│       │   │   ├── cleaner/
│       │   │   ├── spam-detection/
│       │   │   └── role-manager/
│       │   ├── utils/
│       │   └── bot.factory.ts
│       └── test/
├── packages/
│   └── shared/
│       └── logger.ts
├── pnpm-workspace.yaml
├── package.json
├── tsconfig.json
└── .env

-------- xrplevm-antispam-bot/tsconfig.json --------
[Binary file content skipped]

-------- xrplevm-antispam-bot/.env.example --------
TOKEN=your_discord_bot_token_here
RESTRICTED_ROLE_ID=your_restricted_role_id_here


-------- xrplevm-antispam-bot/apps/bot/src/main.ts --------
// apps/bot/src/main.ts

import { Client } from 'discord.js';
import { createBotClient } from './bot.factory';
import { isSpamMessage } from './features/spam-detection/detector.service';
import { incrementSpamCount, checkAndApplyRestriction } from './features/spam-detection/tracker.service';
import { config as dotenvConfig } from 'dotenv';

dotenvConfig();

const client: Client = createBotClient();

client.on('messageCreate', async (message) => {
  // Ignore messages from bots.
  if (message.author.bot) return;

  // Ensure the message is from a guild (to access member information).
  if (!message.guild || !message.member) return;

  // Check if the message is considered spam (includes checks for ignored channels).
  if (isSpamMessage(message)) {
    console.log(`Spam message detected from ${message.author.tag}: "${message.content}"`);

    // Immediately increment the spam count for the user.
    incrementSpamCount(message.member);
    
    // Check the spam count and assign a restricted role if necessary.
    await checkAndApplyRestriction(message.member);

    // Schedule deletion of the spam message after a 60-second delay.
    setTimeout(async () => {
      try {
        await message.delete();
        console.log(`Deleted spam message from ${message.author.tag}`);
      } catch (error) {
        console.error(`Error deleting message from ${message.author.tag}: ${error}`);
      }
    }, 60000);
  }
});

// Start the bot by logging in with the token provided in the .env file.
client.login(process.env.TOKEN);

-------- xrplevm-antispam-bot/apps/bot/src/features/role-manager/role-manager.ts --------
// apps/bot/src/features/role-manager/role-manager.service.ts

import { GuildMember } from 'discord.js';

/**
 * Assigns the restricted role to a member.
 * @param member - The guild member to update.
 * @param restrictedRoleId - The ID of the restricted role to be applied.
 */
export async function assignRestrictedRole(
  member: GuildMember,
  restrictedRoleId: string
): Promise<void> {
  // Check if the member already has the restricted role to avoid duplicate work.
  if (member.roles.cache.has(restrictedRoleId)) {
    console.log(`${member.user.tag} already has the restricted role.`);
    return;
  }

  try {
    await member.roles.add(restrictedRoleId);
    console.log(`Assigned restricted role to ${member.user.tag}`);
  } catch (error) {
    console.error(`Failed to assign restricted role to ${member.user.tag}: ${error}`);
  }
}

-------- xrplevm-antispam-bot/apps/bot/src/features/spam-detection/config/index.ts --------
// apps/bot/src/config/index.ts

export function getConfig() {
    return {
      // List of keywords considered spam.
      spamKeywords: ["hi", "gm", "hello"],
      
      // List of channel IDs to ignore in spam detection.
      ignoredChannels: [
        // e.g., "123456789012345678"
      ],
      
      // The ID of the restricted role to assign when a member sends too many spam messages.
      restrictedRoleId: process.env.RESTRICTED_ROLE_ID || "",
      
      // Optionally, add configuration for channels the restricted role can access.
      restrictedChannels: {
        read: [
          // List allowed channel IDs for reading.
        ],
        write: [
          // List allowed channel IDs for writing (usually a subset, e.g., 3 channels).
        ],
      },
    };
  }
  
-------- xrplevm-antispam-bot/apps/bot/src/features/spam-detection/tracker.service.ts --------
// apps/bot/src/features/spam-detection/tracker.service.ts

import { GuildMember } from 'discord.js';
import { getConfig } from '../../../src/features/spam-detection/config';
import { assignRestrictedRole } from '../role-manager/role-manager';

// In-memory map to track spam message counts by member ID.
const spamCounts: Map<string, number> = new Map();

// Spam threshold before restricted role is applied.
const SPAM_THRESHOLD = 3;

/**
 * Increments the spam count for a given guild member.
 * @param member - The guild member sending a potential spam message.
 * @returns The new spam count for the member.
 */
export function incrementSpamCount(member: GuildMember): number {
  const memberId = member.id;
  const currentCount = spamCounts.get(memberId) || 0;
  const newCount = currentCount + 1;
  spamCounts.set(memberId, newCount);
  console.log(`Spam count for ${member.user.tag} is now ${newCount}`);
  return newCount;
}

/**
 * Checks if the member has reached the spam threshold and applies the restricted role if needed.
 * If the threshold is met, it calls the role manager and resets the spam count.
 * @param member - The guild member to check.
 */
export async function checkAndApplyRestriction(member: GuildMember): Promise<void> {
  const count = spamCounts.get(member.id) || 0;
  if (count >= SPAM_THRESHOLD) {
    const config = getConfig();
    // Apply the restricted role using the role manager service.
    try {
      await assignRestrictedRole(member, config.restrictedRoleId);
      console.log(`Restricted role assigned to ${member.user.tag} after ${count} spam messages.`);
      // Optionally reset the count after role assignment.
      spamCounts.set(member.id, 0);
    } catch (error) {
      console.error(`Error applying restricted role for ${member.user.tag}: ${error}`);
    }
  }
}

/**
 * Gets the current spam count for a given member.
 * @param memberId - The Discord ID of the member.
 * @returns The current spam count (0 if not found).
 */
export function getSpamCount(memberId: string): number {
  return spamCounts.get(memberId) || 0;
}

/**
 * Resets the spam count for a given member.
 * @param memberId - The Discord ID of the member.
 */
export function resetSpamCount(memberId: string): void {
  spamCounts.delete(memberId);
}

-------- xrplevm-antispam-bot/apps/bot/src/features/spam-detection/detector.service.ts --------
// apps/bot/src/features/spam-detection/detector.service.ts

import { Message, TextChannel, NewsChannel, VoiceChannel } from 'discord.js';
import { getConfig } from '../../../src/features/spam-detection/config';

/**
 * Determines if the provided message should be flagged as spam.
 *
 * Rules applied:
 * - Skips if the message channel is in the ignored list.
 * - Normalizes the message (trim + lowercase).
 * - Checks for exact matches with spam keywords, e.g. "hi", "gm", "hello".
 * - Also checks if the message exactly matches the channel's name (case-insensitive).
 */
export function isSpamMessage(message: Message): boolean {
    // Retrieve configuration details for spam keywords and ignored channels.
    const config = getConfig();
  
    // Skip processing for channels in the ignore list.
    if (config.ignoredChannels.includes(message.channel.id as never)) return false;
  
    // Spam keywords as provided in the config.
    const spamKeywords = config.spamKeywords; // e.g., ["hi", "gm", "hello"]
  
    // Normalize the message content.
    const normalizedContent = message.content.trim().toLowerCase();
  
    // Check if the message exactly matches one of the spam keywords.
    if (spamKeywords.includes(normalizedContent)) return true;
  
    // Optionally check if the content is just the channel name.
    const channel = message.channel;
    if (
      channel instanceof TextChannel ||
      channel instanceof NewsChannel ||
      channel instanceof VoiceChannel
    ) {
      // Safely access the 'name' property
      if (normalizedContent === channel.name.toLowerCase()) return true;
    }
  
    // If none of the conditions match, the message is not spam.
    return false;
  }

-------- xrplevm-antispam-bot/apps/bot/src/bot.factory.ts --------
// apps/bot/src/bot.factory.ts

import { Client, GatewayIntentBits } from 'discord.js';

export function createBotClient(): Client {
  const client = new Client({
    intents: [
      GatewayIntentBits.Guilds,
      GatewayIntentBits.GuildMessages,
      GatewayIntentBits.MessageContent, // Needed to access the content of the messages.
    ],
  });

  client.once('ready', () => {
    console.log(`Logged in as ${client.user?.tag}!`);
  });

  return client;
}

-------- xrplevm-antispam-bot/pnpm-workspace.yaml --------
packages:
  - 'apps/*'
  - 'packages/*'
